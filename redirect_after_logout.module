<?php

/**
 * @file
 * Contains redirect_after_logout.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;
use Drupal\Component\Utility\Xss;
use Symfony\Component\HttpFoundation\RedirectResponse;

/**
 * Implements hook_help().
 */
function redirect_after_logout_help($route_name, RouteMatchInterface $route_match) {

  switch ($route_name) {
    // Main module help for the redirect_after_logout module.
    case 'help.page.redirect_after_logout':
      return check_markup(file_get_contents(drupal_get_path('module', 'redirect_after_logout') . "/README.txt"));

  }
}

/**
 * Implements hook_page_attachments().
 */
function redirect_after_logout_page_attachments(array &$attachments) {
  // Set logout message.
  if (!empty($_GET['logout-message']) && \Drupal::currentUser()->isAnonymous()) {
    $config = \Drupal::config('redirect_after_logout.settings');
    $logout_message = $config->get('redirect_after_logout_message', '');
    $token_service = \Drupal::token();
    drupal_set_message(Xss::filter($token_service->replace($logout_message)));
  }
  elseif (!empty($_GET['logout-message']) && !\Drupal::currentUser()->isAnonymous()) {
    $destination = \Drupal::service('redirect.destination')->getAsArray();
    $current_url = Url::fromRoute('<current>');
    $path = $current_url->getInternalPath();
    $path_args = explode('/', $path);
    if (!empty($path_args)) {
      $destination = implode('/', $path_args);
    }
    $response = new RedirectResponse($destination);
    $response->send();
  }
}

/**
 * Implements hook_user_logout().
 */
function redirect_after_logout_user_logout($account) {
  if ($account->hasPermission('redirect user after logout')) {
    $config = \Drupal::config('redirect_after_logout.settings');
    $logout_destination = $config->get('redirect_after_logout_destination', '');
    $token_service = \Drupal::token();
    $destination = &drupal_static(__FUNCTION__);
    $destination = $token_service->replace($logout_destination);
  }
}
